---
import Navbar from "../components/navbar.astro";
// Definimos el tipo de producto
type Product = {
  id: number;
  name: string;
  price: number;
  imageUrl: string;
  quantity: number;
};

// Recuperamos el carrito desde localStorage
const cartJson = "";
const cart: Product[] = cartJson ? JSON.parse(cartJson) : [];

// Actualizar carrito en localStorage
const updateCart = (newCart: Product[]) => {
  localStorage.setItem('cart', JSON.stringify(newCart));
};

// Aumentar cantidad de un producto en el carrito
const increaseQuantity = (productId: number) => {
  const newCart = cart.map((item) =>
    item.id === productId ? { ...item, quantity: item.quantity + 1 } : item
  );
  updateCart(newCart);
};

// Disminuir cantidad de un producto en el carrito
const decreaseQuantity = (productId: number) => {
  const newCart = cart.map((item) =>
    item.id === productId && item.quantity > 1
      ? { ...item, quantity: item.quantity - 1 }
      : item
  );
  updateCart(newCart);
};

// Eliminar un producto del carrito
const removeItem = (productId: number) => {
  const newCart = cart.filter((item) => item.id !== productId);
  updateCart(newCart);
};

// Calcular el precio total y la cantidad de productos
const totalPrice = cart.reduce((acc, item) => acc + item.price * item.quantity, 0);
const totalItems = cart.reduce((acc, item) => acc + item.quantity, 0);
---
<html>
  <head>
    <title>Carrito de Compras</title>
    <link rel="stylesheet" href="/src/styles/tailwind.css" />
  </head>
  <body class="font-sans bg-gray-50 text-gray-800">
    <Navbar />
    <div class="container mx-auto p-4">
      <h1 class="text-2xl font-bold mb-6">Carrito de Compras</h1>
      
      {cart.length > 0 ? (
        <div class="flex flex-col lg:flex-row gap-10">
          <!-- Lista de productos -->
          <div class="flex-1">
            {cart.map((product) => (
              <div class="border p-4 rounded-lg shadow-md flex items-center gap-4 mb-4">
                <img
                  src={product.imageUrl}
                  alt={product.name}
                  class="w-20 h-20 object-cover rounded-lg"
                />
                <div class="flex-1">
                  <h2 class="font-bold text-lg">{product.name}</h2>
                  <p class="text-gray-600">{product.price} USD</p>
                  <div class="flex items-center gap-2 mt-2">
                    <button id={`decrease-${product.id}`} class="px-3 py-1 bg-gray-200 rounded">-</button>
                    <span id={`quantity-${product.id}`}>{product.quantity}</span>
                    <button id={`increase-${product.id}`} class="px-3 py-1 bg-gray-200 rounded">+</button>
                  </div>
                </div>
                <button id={`remove-${product.id}`} class="px-3 py-1 bg-red-500 text-white rounded">Eliminar</button>
              </div>
            ))}
          </div>

          <!-- Resumen de compra -->
          <div class="bg-white p-6 rounded-lg shadow-md w-full lg:w-1/3">
            <h2 class="font-bold text-xl mb-4">Resumen</h2>
            <p class="text-gray-600">Total de productos: {totalItems}</p>
            <p class="text-gray-600 mb-4">Total a pagar: {totalPrice} USD</p>
            <button
              class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg font-bold hover:bg-blue-600 transition"
            >
              Finalizar compra
            </button>
          </div>
        </div>
      ) : (
        <p class="text-center text-gray-500">Tu carrito esta vacio.</p>
      )}
    </div>

    <!-- Script separado para manejar los eventos -->
    <script type="module">
      document.addEventListener('DOMContentLoaded', () => {
        const cart = JSON.parse(localStorage.getItem('cart') || '[]');

        // Aumentar cantidad
        cart.forEach(product => {
          const increaseButton = document.getElementById(`increase-${product.id}`);
          if (increaseButton) {
            increaseButton.addEventListener('click', () => {
              const newCart = cart.map((item) =>
                item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
              );
              localStorage.setItem('cart', JSON.stringify(newCart));
              document.getElementById(`quantity-${product.id}`).textContent = newCart.find(item => item.id === product.id)?.quantity.toString() || '0';
            });
          }

          // Disminuir cantidad
          const decreaseButton = document.getElementById(`decrease-${product.id}`);
          if (decreaseButton) {
            decreaseButton.addEventListener('click', () => {
              const newCart = cart.map((item) =>
                item.id === product.id && item.quantity > 1
                  ? { ...item, quantity: item.quantity - 1 }
                  : item
              );
              localStorage.setItem('cart', JSON.stringify(newCart));
              document.getElementById(`quantity-${product.id}`).textContent = newCart.find(item => item.id === product.id)?.quantity.toString() || '0';
            });
          }

          // Eliminar producto
          const removeButton = document.getElementById(`remove-${product.id}`);
          if (removeButton) {
            removeButton.addEventListener('click', () => {
              const newCart = cart.filter((item) => item.id !== product.id);
              localStorage.setItem('cart', JSON.stringify(newCart));
              location.reload();  // Recargar la p√°gina para reflejar los cambios
            });
          }
        });
      });
    </script>
  </body>
</html>
